version: '3.7'

services:


  serviceregistry:
    build:
      context: service-registry
      dockerfile: ../Dockerfile
    image: tuhin47/serviceregistry:${IMAGE_TAG}
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://serviceregistry:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  configserver:
    build:
      context: configserver
      dockerfile: ../Dockerfile
    image: tuhin47/configserver:${IMAGE_TAG}
    ports:
      - "9296:9296"
    environment:
      - EUREKA_SERVER_ADDRESS
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:9296/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  apigateway:
    build:
      context: apigateway
      dockerfile: ../Dockerfile
    image: tuhin47/gateway:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "9090:9090"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - ZIPKIN_URL
      - REDIS_URL
      - ALLOWED_ORIGINS
      - NOAUTH_ENABLE
    depends_on:
      configserver:
        condition: service_healthy
      zipkin:
        condition: service_started
      redis:
        condition: service_started
      serviceregistry:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://apigateway:9090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  authservice:
    build:
      context: authservice
      dockerfile: ../Dockerfile
    image: tuhin47/authservice:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "7777:7777"
      - "35729:35729"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=userdb
      - CLIENT_ID
      - CLIENT_SECRET
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - SPRING_MAIL_HOST
      - SPRING_MAIL_PORT
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
    working_dir: /app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://authservice:7777/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      mailcatcher:
        condition: service_started
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    #      - logstash
    networks:
      - backend


  productservice:
    build:
      context: productservice
      dockerfile: ../Dockerfile
    image: tuhin47/productservice:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "8081:8081"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=productdb
      - ZIPKIN_URL
      - REDIS_URL
      - NOAUTH_ENABLE
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://productservice:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  orderservice:
    build:
      context: orderservice
      dockerfile: ../Dockerfile
    image: tuhin47/orderservice:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "8082:8082"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=orderdb
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://orderservice:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  chatservice:
    build:
      context: chat-service
      dockerfile: ../Dockerfile
    profiles:
      - all
    image: tuhin47/chatservice:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "8084:8084"
    environment:
      - CONFIG_SERVER_URL
      - EUREKA_SERVER_ADDRESS
      - MONGO_AUTHENTICATION_DATABASE
      - MONGO_DATABASE
      - MONGO_HOST
      - MONGO_PASSWORD
      - MONGO_PORT
      - MONGO_USERNAME
      - ZIPKIN_URL
      - NOAUTH_ENABLE
    depends_on:
      mongo:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend


  paymentservice:
    build:
      context: paymentservice
      dockerfile: ../Dockerfile
    image: tuhin47/paymentservice:${IMAGE_TAG}
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    ports:
      - "8083:8083"
    environment:
      - MYSQL_DB=paymentdb
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://paymentservice:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend

  boilerplate:
    extends:
      file: docker-compose.common.yml
      service: boilerplate

  zipkin:
    extends:
      service: zipkin
      file: docker-compose.common.yml


  redis:
    extends:
      service: redis
      file: docker-compose.common.yml

  database:
    extends:
      service: database
      file: docker-compose.common.yml

  mongo:
    extends:
      service: mongo
      file: docker-compose.common.yml

  elasticsearch:
    extends:
      service: elasticsearch
      file: docker-compose.elk.yml

  logstash:
    depends_on:
      - elasticsearch
    extends:
      service: logstash
      file: docker-compose.elk.yml

  kibana:
    depends_on:
      - elasticsearch
    extends:
      service: kibana
      file: docker-compose.elk.yml

  axonserver:
    extends:
      service: axonserver
      file: docker-compose.common.yml


  localstack:
    extends:
      service: localstack
      file: docker-compose.common.yml

  mailcatcher:
    extends:
      service: mailcatcher
      file: docker-compose.common.yml

  testservice:
    extends:
      service: testservice
      file: docker-compose.common.yml


networks:
  backend:
    driver: bridge

volumes:
  db-data:
  mongo-volume:
    driver: local
  axonserver-data:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/data
  #      o: bind
  axonserver-events:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/events
  #      o: bind
  axonserver-config:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/config
  #      o: bind
  esdata:
    driver: local