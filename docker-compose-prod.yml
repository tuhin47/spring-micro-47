version: '3.7'

services:

  boilerplate:
    build:
      context: ./angular-boilerplate
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT
        - API_BASE
        - API_CONTEXT
        - OAUTH_REDIRECT_URL
    container_name: boilerplate
    profiles:
      - frontend
      - all
    image: 'tuhin47/boilerplate:${PROD_IMAGE_TAG}'
    network_mode: "host"

  serviceregistry:
    build:
      context: service-registry
      dockerfile: ../Dockerfile
    image: 'tuhin47/serviceregistry:${PROD_IMAGE_TAG}'
    ports:
      - 8761:8761
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://serviceregistry:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  configserver:
    build:
      context: configserver
      dockerfile: ../Dockerfile
    image: tuhin47/configserver:${PROD_IMAGE_TAG}
    ports:
      - "9296:9296"
      - "19296:19296"
    environment:
      - EUREKA_SERVER_ADDRESS
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:9296/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - serviceregistry
    networks:
      - backend

  apigateway:
    build:
      context: apigateway
      dockerfile: ../Dockerfile
    image: 'tuhin47/gateway:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "9090:9090"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - ZIPKIN_URL
      - REDIS_HOST
      - ALLOWED_ORIGINS
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    depends_on:
      - configserver
      - zipkin
      - redis
      - serviceregistry
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://apigateway:9090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend


  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
#      - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG
#      - SCRIBE_ENABLED=false
#      - SELF_TRACING_ENABLED=true
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
    networks:
      - backend

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend


  authservice:
    build:
      context: authservice
      dockerfile: ../Dockerfile
    image: 'tuhin47/authservice:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "7777:7777"
      - "35729:35729"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=userdb
      - CLIENT_ID
      - CLIENT_SECRET
      - ZIPKIN_URL
      - REDIS_HOST
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    working_dir: /app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://authservice:7777/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    links:
      - database
      - configserver
    #      - logstash
    networks:
      - backend


  productservice:
    build:
      context: productservice
      dockerfile: ../Dockerfile
    image: 'tuhin47/productservice:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "8081:8081"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - ZIPKIN_URL
      - REDIS_HOST
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://productservice:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    links:
      - database
      - configserver
      - zipkin
    networks:
      - backend

  orderservice:
    build:
      context: orderservice
      dockerfile: ../Dockerfile
    image: 'tuhin47/orderservice:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "8082:8082"
    environment:
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - ZIPKIN_URL
      - REDIS_HOST
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://orderservice:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - database
      - configserver
      - zipkin
    networks:
      - backend

  chatservice:
    build:
      context: chat-service
      dockerfile: ../Dockerfile
    profiles:
      - all
    image: 'tuhin47/chatservice:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "8084:8084"
    environment:
      - CONFIG_SERVER_URL
      - EUREKA_SERVER_ADDRESS
      - MONGO_AUTHENTICATION_DATABASE
      - MONGO_DATABASE
      - MONGO_HOST
      - MONGO_PASSWORD
      - MONGO_PORT
      - MONGO_USERNAME
      - ZIPKIN_URL
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    depends_on:
      - mongo
      - configserver
      - zipkin
    networks:
      - backend


  paymentservice:
    build:
      context: paymentservice
      dockerfile: ../Dockerfile
    image: 'tuhin47/paymentservice:${PROD_IMAGE_TAG}'
    restart: on-failure:3
    ports:
      - "8083:8083"
    environment:
      - MYSQL_DB=paymentdb
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - ZIPKIN_URL
      - REDIS_HOST
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - NOAUTH_TOKEN
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://paymentservice:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - database
      - configserver
      - zipkin
    networks:
      - backend

  database:
    container_name: database
    image: 'mysql:latest'
    ports:
      - ${MYSQL_PORT}:3306
    restart: always
    environment:
      - MYSQL_USER=extra
      - MYSQL_PORT
      - MYSQL_PASSWORD=extra
      - MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DB=userdb
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  mongo:
    image: mongo
    container_name: mongo
    restart: on-failure:3
    profiles:
      - all
    ports:
      - "27017:27017"
    volumes:
      - mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - backend

  elasticsearch:
    build: elk/elasticsearch/
#    container_name: elasticsearch
    profiles:
      - elk
      - all
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    networks:
      - backend

  logstash:
    build: elk/logstash/
#    container_name: logstash
    profiles:
      - elk
      - all
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./elk/logstash/config:/etc/logstash/conf.d
    ports:
      - "9999:9999"
    depends_on:
      - elasticsearch
    networks:
      - backend

  kibana:
    build: elk/kibana/
#    container_name: kibana
    profiles:
      - elk
      - all
    volumes:
      - ./elk/kibana/config/:/opt/kibana/config/
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend
  axonserver:
    image: axoniq/axonserver
    hostname: axonserve
    volumes:
      - axonserver-data:/data
      - axonserver-events:/eventdata
      - axonserver-config:/config:ro
    ports:
      - '8024:8024'
      - '8124:8124'
      - '8224:8224'
    networks:
      - backend


networks:
  backend:
    driver: bridge

volumes:
  db-data:
  mongo-volume:
    driver: local
  axonserver-data:
    driver: local
    driver_opts:
      type: none
      device: $AXON_DATA/data
      o: bind
  axonserver-events:
    driver: local
    driver_opts:
      type: none
      device: $AXON_DATA/events
      o: bind
  axonserver-config:
    driver: local
    driver_opts:
      type: none
      device: $AXON_DATA/config
      o: bind
