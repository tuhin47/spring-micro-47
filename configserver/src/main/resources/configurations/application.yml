eureka:
  instance:
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: ${EUREKA_SERVER_ADDRESS:http://127.0.0.1:8761/eureka}

spring:
  threads:
    virtual:
      enabled: true
  flyway:
    user: ${MYSQL_USER:root}
    password: ${MYSQL_PASSWORD:root}
    driverClassName: com.mysql.cj.jdbc.Driver
  datasource:
    username: ${MYSQL_USER:root}
    password: ${MYSQL_PASSWORD:root}
    driverClassName: com.mysql.cj.jdbc.Driver
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false
  main:
    allow-bean-definition-overriding: true
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  # https://stackoverflow.com/a/50523578/7499069
  servlet:
    multipart:
      location: /data/upload_tmp
  data:
    redis:
      url: ${REDIS_URL:redis://127.0.0.1:6379}
  output:
    ansi:
      enabled: ALWAYS
axon:
  axonserver:
    servers: ${AXON_SERVER_URL:127.0.0.1:8124}
  extension:
    tracing:
      span:
        commandTags: MESSAGE_ID, MESSAGE_TYPE, PAYLOAD_TYPE, MESSAGE_NAME, PAYLOAD
        eventTags: MESSAGE_ID, AGGREGATE_ID, PAYLOAD_TYPE, MESSAGE_NAME, PAYLOAD
        queryTags: MESSAGE_ID, MESSAGE_TYPE, PAYLOAD_TYPE, MESSAGE_NAME, PAYLOAD
management:
  otlp:
    tracing:
      endpoint: ${TRACING_URL:http://127.0.0.1:4317}
      transport: grpc
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: "*"
        # include: "health,info"
  endpoint:
    health:
      show-details: always


app:
  version: @project.version@
  logstash: ${LOGSTASH_HOST:127.0.0.1}
  config:
    qrIssuer: tuhin47
    noAuth: ${NOAUTH_ENABLE:false}
  auth:
    tokenSecret: 2a0d3feeb0312fe7a3e577046a54bedbc16e3d0c25428b7ba46de5bcad73d1f62f4f3f9d86fb75601fe4cdfc85921742a96acf848bcbeff938b0f40c5eeb622f
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorization request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris: http://127.0.0.1:4200/auth/login,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect

resilience4j:
  circuitbreaker:
    instances:
      external:
        event-consumer-buffer-size: 10 # buffer size 10
        failure-rate-threshold: 50 #
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true # half open enabled
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10 # record the outcome of calls when the CircuitBreaker is closed
        sliding-window-type: COUNT_BASED # the type of the sliding window

feign:
  client:
    config:
      default:
        errorDecoder: me.tuhin47.config.decoder.CustomErrorDecoder
      stores:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: FULL
        requestInterceptors:
          - me.tuhin47.client.FeignConfig

logging:
  config: ${CONFIG_SERVER_URL:http://localhost:9296}/${spring.application.name}/default/master/logback-spring.xml
  level:
    com: INFO
    me:
      tuhin47: DEBUG
    org:
      springframework.orm.jpa: INFO
      springframework.transaction: DEBUG
      springframework: INFO
      hibernate:
        SQL: INFO
        type:
          descriptor:
            sql:
              BasicBinder: DEBUG
