version: '3.7'

services:

  boilerplate:
    build:
      context: ./angular-boilerplate
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT
        - API_BASE
        - API_CONTEXT
        - OAUTH_REDIRECT_URL
    container_name: boilerplate
    profiles:
      - frontend
      - all
    image: tuhin47/boilerplate:${IMAGE_TAG}
    network_mode: "host"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "-q", "-O", "-", "http://zipkin:9411/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - backend

  database:
    container_name: database
    image: mysql:8.0
    ports:
      - ${MYSQL_PORT}:3306
    restart: always
    environment:
      - MYSQL_USER=extra
      - MYSQL_PORT
      - MYSQL_PASSWORD
      - MYSQL_ROOT_PASSWORD=$SQL_ROOT_PASSWORD
      - MYSQL_DB=userdb
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "127.0.0.1" ]
      timeout: 20s
      retries: 10

  mongo:
    image: mongo
    container_name: mongo
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    profiles:
      - all
    ports:
      - "27017:27017"
    volumes:
      - mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - backend

  axonserver:
    image: axoniq/axonserver:4.6.11
    hostname: axonserver
    volumes:
      - axonserver-data:/data
      - axonserver-events:/eventdata
      - axonserver-config:/config:ro
    ports:
      - '8024:8024'
      - '8124:8124'
      - '8224:8224'
    networks:
      - backend

  localstack:
    container_name: localstack
    profiles:
      - localstack
    image: localstack/localstack:3.2.0
    environment:
      - DEBUG=1
      - USE_SSL=0
      - AWS_CBOR_DISABLE=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME=localstack
      - SERVICES=s3,sns,sqs
      - AWS_DEFAULT_REGION=us-east-1
    ports:
      - '4566-4583:4566-4583'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #      - ./aws-samples/files:/tmp/localstack
      - ./aws-reactive/script/localstack/s3/init-s3-bucket.sh:/docker-entrypoint-initaws.d/init-s3-bucket.sh
      - ./aws-reactive/script/localstack/snssqs/init-sns-sqs.sh:/docker-entrypoint-initaws.d/init-sns-sqs.sh

  mailcatcher:
    container_name: mailcatcher
    image: schickling/mailcatcher
    ports:
      - '1080:1080'
      - '1025:1025'
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "wget", "--spider" , "http://mailcatcher:1080" ]
      interval: 30s
      timeout: 10s
      retries: 3

  testservice:
    container_name: testservice
    profiles:
      - test
    build:
      context: postman_collection
      dockerfile: test.Dockerfile
    image: tuhin47/testservice:${IMAGE_TAG}
    restart: 'no'
    #    command: newman run Microservice_Collection.postman_collection.json --delay-request=500 --iteration-count=2 --bail
    networks:
      - backend

