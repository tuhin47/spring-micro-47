version: '3.7'

services:

  boilerplate:
    build:
      context: ./angular-boilerplate
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT
        - API_BASE
        - API_CONTEXT
        - OAUTH_REDIRECT_URL
    container_name: boilerplate
    profiles:
      - frontend
      - all
    image: 'tuhin47/boilerplate:dev'
    network_mode: "host"

  serviceregistry:
    build:
      context: service-registry
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/serviceregistry:dev'
    container_name: serviceregistry
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://serviceregistry:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8761:8761"
      - "18761:18761"
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/service-registry:/app
      - $MAVEN_CONFIG:/root/.m2
    environment:
      - DEUBG_PORT=18761

  configserver:
    build:
      context: configserver
      dockerfile: ../dev.Dockerfile
    image: tuhin47/configserver:dev
    container_name: configserver
    ports:
      - "9296:9296"
      - "19296:19296"
    environment:
      - DEUBG_PORT=19296
      - EUREKA_SERVER_ADDRESS
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:9296/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - serviceregistry
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/configserver:/app
      - $MAVEN_CONFIG:/root/.m2

  apigateway:
    build:
      context: apigateway
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/gateway:dev'
    container_name: apigateway
    ports:
      - "9090:9090"
      - "19090:19090"
    environment:
      - DEUBG_PORT=19090
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - ZIPKIN_URL
      - REDIS_URL
      - ALLOWED_ORIGINS
      - NOAUTH_ENABLE
    depends_on:
      configserver:
        condition: service_healthy
      zipkin:
        condition: service_started
      redis:
        condition: service_started
      serviceregistry:
        condition: service_healthy
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://apigateway:9090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/apigateway:/app
      - $MAVEN_CONFIG:/root/.m2

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mem
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - "9411:9411"
    networks:
      - backend

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  authservice:
    build:
      context: authservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/authservice:dev'
    container_name: authservice
    ports:
      - "7777:7777"
      - "17777:17777"
      - "35729:35729"
    environment:
      - DEUBG_PORT=17777
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=userdb
      - CLIENT_ID
      - CLIENT_SECRET
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://authservice:7777/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    #      - logstash
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/authservice:/app
      - $MAVEN_CONFIG:/root/.m2

  productservice:
    build:
      context: productservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/productservice:dev'
    container_name: productservice
    ports:
      - "8081:8081"
      - "18081:18081"
    environment:
      - DEUBG_PORT=18081
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=productdb
      - ZIPKIN_URL
      - REDIS_URL
      - NOAUTH_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://productservice:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/productservice:/app
      - $MAVEN_CONFIG:/root/.m2

  orderservice:
    build:
      context: orderservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/orderservice:dev'
    container_name: orderservice
    ports:
      - "8082:8082"
      - "18082:18082"
    environment:
      - DEUBG_PORT=18082
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=orderdb
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://orderservice:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/orderservice:/app
      - $MAVEN_CONFIG:/root/.m2

  chatservice:
    build:
      context: chat-service
      dockerfile: ../dev.Dockerfile
    profiles:
      - all
    image: 'tuhin47/chatservice:dev'
    container_name: chatservice
    ports:
      - "8084:8084"
      - "18084:18084"
    environment:
      - DEUBG_PORT=18084
      - CONFIG_SERVER_URL
      - EUREKA_SERVER_ADDRESS
      - MONGO_AUTHENTICATION_DATABASE
      - MONGO_DATABASE
      - MONGO_HOST
      - MONGO_PASSWORD
      - MONGO_PORT
      - MONGO_USERNAME
      - ZIPKIN_URL
      - NOAUTH_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    depends_on:
      mongo:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/chat-service:/app
      - $MAVEN_CONFIG:/root/.m2

  paymentservice:
    build:
      context: paymentservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/paymentservice:dev'
    container_name: paymentservice
    ports:
      - "8083:8083"
      - "18083:18083"
    environment:
      - DEUBG_PORT=18083
      - MYSQL_DB=paymentdb
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - ZIPKIN_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://paymentservice:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/paymentservice:/app
      - $MAVEN_CONFIG:/root/.m2

  database:
    container_name: database
    image: 'mysql:latest'
    ports:
      - "${MYSQL_PORT}:3306"
    restart: on-failure
    environment:
      - MYSQL_USER=extra
      - MYSQL_PORT
      - MYSQL_PASSWORD=root
      - MYSQL_ROOT_PASSWORD=$SQL_ROOT_PASSWORD
      - MYSQL_DB=userdb
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "127.0.0.1" ]
      timeout: 20s
      retries: 10

  mongo:
    image: mongo
    container_name: mongo
    deploy:
      restart_policy:
        max_attempts: 3
        condition: on-failure
    profiles:
      - all
    ports:
      - "27017:27017"
    volumes:
      - mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - backend

  elasticsearch:
    build: elk/elasticsearch/
    container_name: elasticsearch
    profiles:
      - elk
      - all
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    networks:
      - backend

  logstash:
    build: elk/logstash/
    container_name: logstash
    profiles:
      - elk
      - all
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./elk/logstash/config:/etc/logstash/conf.d
    ports:
      - "9999:9999"
    depends_on:
      - elasticsearch
    networks:
      - backend

  kibana:
    build: elk/kibana/
    container_name: kibana
    profiles:
      - elk
      - all
    volumes:
      - ./elk/kibana/config/:/opt/kibana/config/
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend

  axonserver:
    image: axoniq/axonserver@sha256:1ee3484f094d73bcaea860dd76ea9f97b5834c69cd365e87bf711be9df1dc741
    hostname: axonserver
    volumes:
      - axonserver-data:/data
      - axonserver-events:/eventdata
      - axonserver-config:/config:ro
    ports:
      - '8024:8024'
      - '8124:8124'
      - '8224:8224'
    networks:
      - backend

  testservice:
    container_name: testservice
    profiles:
      - test
    build:
      context: postman_collection
      dockerfile: test.Dockerfile
    image: tuhin47/testservice:${IMAGE_TAG}
    restart: 'no'
    #    command: newman run Microservice_Collection.postman_collection.json --delay-request=500 --iteration-count=2 --bail
    networks:
      - backend


networks:
  backend:
    driver: bridge

volumes:
  db-data:
  mongo-volume:
    driver: local
  axonserver-data:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/data
  #      o: bind
  axonserver-events:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/events
  #      o: bind
  axonserver-config:
    driver: local
#    driver_opts:
#      type: none
#      device: ${PWD}/axon/config
#      o: bind
