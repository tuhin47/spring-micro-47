version: '3.7'

services:

  serviceregistry:
    build:
      context: service-registry
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/serviceregistry:dev'
    container_name: serviceregistry
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://serviceregistry:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8761:8761"
      - "18761:18761"
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/service-registry:/app
      - $MAVEN_REPO:/root/.m2/repository
    environment:
      - DEUBG_PORT=18761

  configserver:
    build:
      context: configserver
      dockerfile: ../dev.Dockerfile
    image: tuhin47/configserver:dev
    container_name: configserver
    ports:
      - "9296:9296"
      - "19296:19296"
    environment:
      - DEUBG_PORT=19296
      - EUREKA_SERVER_ADDRESS
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:9296/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/configserver:/app
      - $MAVEN_REPO:/root/.m2/repository

  apigateway:
    build:
      context: apigateway
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/gateway:dev'
    container_name: apigateway
    ports:
      - "9090:9090"
      - "19090:19090"
    environment:
      - DEUBG_PORT=19090
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - TRACING_URL
      - REDIS_URL
      - ALLOWED_ORIGINS
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
    depends_on:
      configserver:
        condition: service_healthy
      redis:
        condition: service_started
      serviceregistry:
        condition: service_healthy
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://apigateway:9090/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/apigateway:/app
      - $PROJECT_PATH/logs:/tmp/logs
      - $MAVEN_REPO:/root/.m2/repository

  authservice:
    build:
      context: authservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/authservice:dev'
    container_name: authservice
    ports:
      - "7777:7777"
      - "17777:17777"
      - "35729:35729"
    environment:
      - DEUBG_PORT=17777
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=userdb
      - CLIENT_ID
      - CLIENT_SECRET
      - TRACING_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
      - SPRING_MAIL_HOST
      - SPRING_MAIL_PORT
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE
    working_dir: /app
    command: sh /script/run.sh
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://authservice:7777/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    #      - logstash
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/authservice:/app
      - $PROJECT_PATH/logs:/tmp/logs
      - $MAVEN_REPO:/root/.m2/repository

  productservice:
    build:
      context: productservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/productservice:dev'
    container_name: productservice
    ports:
      - "8081:8081"
      - "18081:18081"
    environment:
      - DEUBG_PORT=18081
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=productdb
      - TRACING_URL
      - REDIS_URL
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://productservice:8081/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/productservice:/app
      - $PROJECT_PATH/logs:/tmp/logs
      - $MAVEN_REPO:/root/.m2/repository

  orderservice:
    build:
      context: orderservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/orderservice:dev'
    container_name: orderservice
    ports:
      - "8082:8082"
      - "18082:18082"
    environment:
      - DEUBG_PORT=18082
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DB=orderdb
      - TRACING_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://orderservice:8082/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/orderservice:/app
      - $PROJECT_PATH/logs:/tmp/logs
      - $MAVEN_REPO:/root/.m2/repository

  chatservice:
    build:
      context: chat-service
      dockerfile: ../dev.Dockerfile
    profiles:
      - all
    image: 'tuhin47/chatservice:dev'
    container_name: chatservice
    ports:
      - "8084:8084"
      - "18084:18084"
    environment:
      - DEUBG_PORT=18084
      - CONFIG_SERVER_URL
      - EUREKA_SERVER_ADDRESS
      - MONGO_AUTHENTICATION_DATABASE
      - MONGO_DATABASE
      - MONGO_HOST
      - MONGO_PASSWORD
      - MONGO_PORT
      - MONGO_USERNAME
      - TRACING_URL
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
    working_dir: /app
    command: sh /script/run.sh
    depends_on:
      mongo:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/chat-service:/app
      - $MAVEN_REPO:/root/.m2/repository

  paymentservice:
    build:
      context: paymentservice
      dockerfile: ../dev.Dockerfile
    image: 'tuhin47/paymentservice:dev'
    container_name: paymentservice
    ports:
      - "8083:8083"
      - "18083:18083"
    environment:
      - DEUBG_PORT=18083
      - MYSQL_DB=paymentdb
      - EUREKA_SERVER_ADDRESS
      - CONFIG_SERVER_URL
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - TRACING_URL
      - REDIS_URL
      - AXON_SERVER_URL
      - NOAUTH_ENABLE
      - LOGSTASH_HOST
      - SPRING_PROFILES_ACTIVE
    working_dir: /app
    command: sh /script/run.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://paymentservice:8083/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    networks:
      - backend
    volumes:
      - $PROJECT_PATH/paymentservice:/app
      - $PROJECT_PATH/logs:/tmp/logs
      - $MAVEN_REPO:/root/.m2/repository

  boilerplate:
    extends:
      file: docker-compose.common.yml
      service: boilerplate

  #  zipkin:
  #    extends:
  #      service: zipkin
  #      file: docker-compose.common.yml

  tracing:
    extends:
      file: docker-compose.common.yml
      service: tracing

  jaeger-service:
    extends:
      file: docker-compose.common.yml
      service: jaeger-service

  redis:
    extends:
      service: redis
      file: docker-compose.common.yml

  database:
    extends:
      service: database
      file: docker-compose.common.yml

  mongo:
    extends:
      service: mongo
      file: docker-compose.common.yml

  elasticsearch:
    extends:
      service: elasticsearch
      file: docker-compose.elk.yml

  logstash:
    depends_on:
      - elasticsearch
    extends:
      service: logstash
      file: docker-compose.elk.yml

  kibana:
    depends_on:
      - elasticsearch
    extends:
      service: kibana
      file: docker-compose.elk.yml

  axonserver:
    extends:
      service: axonserver
      file: docker-compose.common.yml


  localstack:
    extends:
      service: localstack
      file: docker-compose.common.yml

  mailcatcher:
    image: schickling/mailcatcher
    networks:
      - backend
    ports:
      - '1080:1080' # MailCatcher web interface
      - '1025:1025' # MailCatcher SMTP server

  testservice:
    extends:
      service: testservice
      file: docker-compose.common.yml

networks:
  backend:
    driver: bridge

volumes:
  db-data:
  mongo-volume:
    driver: local
  axonserver-data:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/data
  #      o: bind
  axonserver-events:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/events
  #      o: bind
  axonserver-config:
    driver: local
  #    driver_opts:
  #      type: none
  #      device: ${PWD}/axon/config
  #      o: bind
  esdata:
    driver: local